
#include "HistoManager.hh"
#include "G4UnitsTable.hh"
#include "G4SystemOfUnits.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

HistoManager::HistoManager()
 : fFactoryOn(false)
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

HistoManager::~HistoManager()
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::Book()
{
  // Create or get analysis manager
  // The choice of analysis technology is done via selection of a namespace
  // in HistoManager.hh
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
  analysisManager->SetVerboseLevel(1);
  analysisManager->SetNtupleMerging(true);
      
  
  // Open an output file
  //
  G4bool fileOpen = analysisManager->OpenFile("Simulation");
  if (! fileOpen) {
    G4cerr << "\n---> HistoManager::Book(): cannot open " 
           << analysisManager->GetFileName() << G4endl;
    return;
  }
  
  // Create ntuples.
  // Ntuples ids are generated automatically starting from 0.
  // The start value can be changed by:
  // analysisManager->SetFirstMtupleId(1);  
  
  analysisManager->CreateNtuple("PC", "Edep");
  analysisManager->CreateNtupleIColumn("Origin")  ; // column Id = 0
  analysisManager->CreateNtupleDColumn("TubeEdep"); // column Id = 1
  analysisManager->CreateNtupleDColumn("CollEdep"); // column Id = 2
  analysisManager->CreateNtupleDColumn("ChamEdep"); // column Id = 3
  analysisManager->CreateNtupleDColumn("PC1Time"); // column Id = 4
  analysisManager->CreateNtupleDColumn("PC2Time"); // column Id = 5
  analysisManager->CreateNtupleDColumn("PC3Time"); // column Id = 6
  analysisManager->CreateNtupleDColumn("PC1Edep"); // column Id = 7
  analysisManager->CreateNtupleDColumn("PC2Edep"); // column Id = 8
  analysisManager->CreateNtupleDColumn("PC3Edep"); // column Id = 9
  
  analysisManager->FinishNtuple();

  fFactoryOn = true;       

  G4cout << "\n----> Output file is open in " 
         << analysisManager->GetFileName() << "." 
         << analysisManager->GetFileType() << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::Save()
{
  if (! fFactoryOn) return;
  
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();    
  analysisManager->Write();
  analysisManager->CloseFile(); 
   
  G4cout << "\n----> Histograms and ntuples are saved\n" << G4endl;
      
  delete G4AnalysisManager::Instance();
  fFactoryOn = false;
}


void HistoManager::FillNtupleEvent(G4int Origin, G4double TubeEdep, G4double CollEdep, G4double ChamEdep)
{                
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
  // Fill ntuple
  analysisManager->FillNtupleIColumn(0, Origin);
  analysisManager->FillNtupleDColumn(1, TubeEdep);
  analysisManager->FillNtupleDColumn(2, CollEdep);
  analysisManager->FillNtupleDColumn(3, ChamEdep);
  //  analysisManager->AddNtupleRow();  
 
}

void HistoManager::FillNtupleHC(G4double time1, G4double time2, G4double time3,
				G4double Edep1, G4double Edep2, G4double Edep3)
{
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();

  analysisManager->FillNtupleDColumn(4,time1);
  analysisManager->FillNtupleDColumn(5,time2);
  analysisManager->FillNtupleDColumn(6,time3);
  analysisManager->FillNtupleDColumn(7,Edep1);
  analysisManager->FillNtupleDColumn(8,Edep2);
  analysisManager->FillNtupleDColumn(9,Edep3);
  analysisManager->AddNtupleRow();

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

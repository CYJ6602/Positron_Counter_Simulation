
#include "PCTrackerHit.hh"
#include "G4UnitsTable.hh"
#include "G4VVisManager.hh"
#include "G4Circle.hh"
#include "G4Colour.hh"
#include "G4VisAttributes.hh"

#include <iomanip>

G4ThreadLocal G4Allocator<PCTrackerHit>* PCTrackerHitAllocator=0;

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

PCTrackerHit::PCTrackerHit()
 : G4VHit(),
   fTrackID(-1),
   fVolume(0),
   fTime(0.)
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

PCTrackerHit::~PCTrackerHit() {}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

PCTrackerHit::PCTrackerHit(const PCTrackerHit& right)
  : G4VHit()
{
  fTrackID   = right.fTrackID;
  fVolume    = right.fVolume;
  fTime      = right.fTime;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

const PCTrackerHit& PCTrackerHit::operator=(const PCTrackerHit& right)
{
  fTrackID   = right.fTrackID;
  fVolume    = right.fVolume;
  fTime      = right.fTime;

  return *this;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4int PCTrackerHit::operator==(const PCTrackerHit& right) const
{
  return ( this == &right ) ? 1 : 0;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void PCTrackerHit::Draw()
{
  G4VVisManager* pVVisManager = G4VVisManager::GetConcreteInstance();
  if(pVVisManager)
  {
    G4Circle circle(fPos);
    circle.SetScreenSize(4.);
    circle.SetFillStyle(G4Circle::filled);
    G4Colour colour(1.,0.,0.);
    G4VisAttributes attribs(colour);
    circle.SetVisAttributes(attribs);
    pVVisManager->Draw(circle);
  }
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void PCTrackerHit::Print()
{
  G4cout
    << "  trackID: " << fTrackID << " LogicalVolume: " << fVolume->GetName()
     << "Time: "
     << std::setw(7) << G4BestUnit(fTime,"Time")
     << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
